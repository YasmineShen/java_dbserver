package edu.uob;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * This class implements the DB server.
 */
public class DBServer {

    private static final char END_OF_TRANSMISSION = 4;

    // 用来存储所有数据库 { dbNameLowerCase -> Database对象 }
    private final Map<String, Database> databases = new HashMap<>();
    // 当前使用的数据库名称（小写存储）
    private String currentDatabaseName = null;

    // 存放所有数据库的父目录
    private final String storageFolderPath;

    /**
     * KEEP this signature otherwise we won't be able to mark your submission correctly.
     */
    public DBServer() {
        // 指定存放数据库的文件夹
        storageFolderPath = Paths.get("databases").toAbsolutePath().toString();
        try {
            // 若数据库目录不存在，则创建
            Files.createDirectories(Paths.get(storageFolderPath));
        } catch(IOException ioe) {
            System.out.println("Can't seem to create database storage folder " + storageFolderPath);
        }
        // 从文件系统中加载已有数据库
        loadAllDatabasesFromFolder();
    }

    /**
     * KEEP this signature (i.e. {@code edu.uob.DBServer.handleCommand(String)})
     * otherwise we won't be able to mark your submission correctly.
     */
    public String handleCommand(String command) {
        if(command == null || command.trim().isEmpty()) {
            return "[ERROR] Empty or null command";
        }
        // 去掉首尾空白并去掉末尾分号（若存在）
        command = command.trim();
        if(!command.endsWith(";")) {
            return "[ERROR] Semicolon is missing at the line of end";
        }
        command = command.substring(0, command.length() - 1).trim();
        // 尝试解析和执行
        String result;
        try {
            result = parseAndExecuteCommand(command);
        } catch (Exception e) {
            // 若执行中出现任何未捕获的异常，返回 [ERROR]
            // 注意：正式环境下可考虑打印异常以便调试
            result = "[ERROR] " + e.getMessage();
        }

        return result;
    }

    // =============== 命令解析和分发 ===============

    /**
     * 使用正则表达式和简单分支来识别命令种类，并调用对应处理函数
     */
    private String parseAndExecuteCommand(String cmd) {
        // 为了简化演示，这里用了若干主要正则。对大小写不敏感，用 (?i) 修饰
        // 注意：真实实现中你可能需要更细粒度的正则来捕捉列名、条件等

        // 1) USE <dbname>
        Pattern usePattern = Pattern.compile("(?i)^USE\\s+([A-Za-z0-9]+)$");
        Matcher useMatcher = usePattern.matcher(cmd);
        if(useMatcher.find()) {
            String dbName = useMatcher.group(1);
            return handleUse(dbName);
        }

        // 2) CREATE DATABASE <dbname>
        Pattern createDBPattern = Pattern.compile("(?i)^CREATE\\s+DATABASE\\s+([A-Za-z0-9]+)$");
        Matcher createDBMatcher = createDBPattern.matcher(cmd);
        if(createDBMatcher.find()) {
            String dbName = createDBMatcher.group(1);
            return handleCreateDatabase(dbName);
        }

        // 3) CREATE TABLE <tableName> (columns)  或 CREATE TABLE <tableName>
        Pattern createTableWithColsPattern = Pattern.compile(
                "(?i)^CREATE\\s+TABLE\\s+([A-Za-z0-9]+)\\s*\\((.*)\\)$"
        );
        Matcher createTableWithColsMatcher = createTableWithColsPattern.matcher(cmd);
        if(createTableWithColsMatcher.find()) {
            String tableName = createTableWithColsMatcher.group(1);
            String colsRaw = createTableWithColsMatcher.group(2).trim();
            return handleCreateTable(tableName, colsRaw);
        }

        Pattern createTableNoColsPattern = Pattern.compile("(?i)^CREATE\\s+TABLE\\s+([A-Za-z0-9]+)$");
        Matcher createTableNoColsMatcher = createTableNoColsPattern.matcher(cmd);
        if(createTableNoColsMatcher.find()) {
            String tableName = createTableNoColsMatcher.group(1);
            return handleCreateTable(tableName, "");
        }

        // 4) DROP DATABASE <dbname>  或 DROP TABLE <tableName>
        Pattern dropDBPattern = Pattern.compile("(?i)^DROP\\s+DATABASE\\s+([A-Za-z0-9]+)$");
        Matcher dropDBMatcher = dropDBPattern.matcher(cmd);
        if(dropDBMatcher.find()) {
            String dbName = dropDBMatcher.group(1);
            return handleDropDatabase(dbName);
        }

        Pattern dropTablePattern = Pattern.compile("(?i)^DROP\\s+TABLE\\s+([A-Za-z0-9]+)$");
        Matcher dropTableMatcher = dropTablePattern.matcher(cmd);
        if(dropTableMatcher.find()) {
            String tableName = dropTableMatcher.group(1);
            return handleDropTable(tableName);
        }

        // 5) ALTER TABLE <tableName> ADD <colName>   或   ALTER TABLE <tableName> DROP <colName>
        Pattern alterPattern = Pattern.compile("(?i)^ALTER\\s+TABLE\\s+([A-Za-z0-9]+)\\s+(ADD|DROP)\\s+([A-Za-z0-9]+)$");
        Matcher alterMatcher = alterPattern.matcher(cmd);
        if(alterMatcher.find()) {
            String tableName = alterMatcher.group(1);
            String action = alterMatcher.group(2).toUpperCase();
            String colName = alterMatcher.group(3);
            return handleAlterTable(tableName, action, colName);
        }

        // 6) INSERT INTO <table> VALUES(...)
        Pattern insertPattern = Pattern.compile("(?i)^INSERT\\s+INTO\\s+([A-Za-z0-9]+)\\s+VALUES\\s*\\((.*)\\)$");
        Matcher insertMatcher = insertPattern.matcher(cmd);
        if(insertMatcher.find()) {
            String tableName = insertMatcher.group(1);
            String valuesRaw = insertMatcher.group(2).trim();
            return handleInsert(tableName, valuesRaw);
        }

        // 7) SELECT <columns> FROM <table> [WHERE <condition>]
        //    先分离出 SELECT ... FROM ... WHERE ...
        Pattern selectPattern = Pattern.compile("(?i)^SELECT\\s+(.*)\\s+FROM\\s+([A-Za-z0-9]+)(?:\\s+WHERE\\s+(.*))?$");
        Matcher selectMatcher = selectPattern.matcher(cmd);
        if(selectMatcher.find()) {
            String colsPart = selectMatcher.group(1).trim();
            String tableName = selectMatcher.group(2);
            String wherePart = selectMatcher.group(3); // 可能为空
            if(wherePart != null) {
                wherePart = wherePart.trim();
            }
            return handleSelect(tableName, colsPart, wherePart);
        }

        // 8) UPDATE <table> SET <nameValueList> WHERE <condition>
        Pattern updatePattern = Pattern.compile("(?i)^UPDATE\\s+([A-Za-z0-9]+)\\s+SET\\s+(.*)\\s+WHERE\\s+(.*)$");
        Matcher updateMatcher = updatePattern.matcher(cmd);
        if(updateMatcher.find()) {
            String tableName = updateMatcher.group(1);
            String setPart = updateMatcher.group(2).trim();
            String wherePart = updateMatcher.group(3).trim();
            return handleUpdate(tableName, setPart, wherePart);
        }

        // 9) DELETE FROM <table> WHERE <condition>
        Pattern deletePattern = Pattern.compile("(?i)^DELETE\\s+FROM\\s+([A-Za-z0-9]+)\\s+WHERE\\s+(.*)$");
        Matcher deleteMatcher = deletePattern.matcher(cmd);
        if(deleteMatcher.find()) {
            String tableName = deleteMatcher.group(1);
            String wherePart = deleteMatcher.group(2).trim();
            return handleDelete(tableName, wherePart);
        }

        // 10) JOIN <table1> AND <table2> ON <col1> AND <col2>
        Pattern joinPattern = Pattern.compile("(?i)^JOIN\\s+([A-Za-z0-9]+)\\s+AND\\s+([A-Za-z0-9]+)\\s+ON\\s+([A-Za-z0-9]+)\\s+AND\\s+([A-Za-z0-9]+)$");
        Matcher joinMatcher = joinPattern.matcher(cmd);
        if(joinMatcher.find()) {
            String table1 = joinMatcher.group(1);
            String table2 = joinMatcher.group(2);
            String col1 = joinMatcher.group(3);
            String col2 = joinMatcher.group(4);
            return handleJoin(table1, table2, col1, col2);
        }

        // 未匹配到任何已知命令，则语法错误
        return "[ERROR] Command not recognized or invalid syntax";
    }

    // =============== 具体命令处理函数 ===============

    /** USE dbName */
    private String handleUse(String dbName) {
        String dbNameLower = dbName.toLowerCase();
        if(!databases.containsKey(dbNameLower)) {
            return "[ERROR] Database does not exist: " + dbName;
        }
        currentDatabaseName = dbNameLower;
        return "[OK]";
    }

    /** CREATE DATABASE dbName */
    private String handleCreateDatabase(String dbName) {
        String dbNameLower = dbName.toLowerCase();
        if(databases.containsKey(dbNameLower)) {
            return "[ERROR] Database already exists: " + dbName;
        }
        // 创建文件夹
        File dbFolder = new File(storageFolderPath, dbNameLower);
        if(dbFolder.exists()) {
            return "[ERROR] Folder already exists: " + dbName;
        }
        boolean success = dbFolder.mkdir();
        if(!success) {
            return "[ERROR] Failed to create database folder for: " + dbName;
        }
        // 放到内存数据库映射中
        Database dbObj = new Database(dbNameLower);
        databases.put(dbNameLower, dbObj);
        return "[OK]";
    }

    /** CREATE TABLE tableName (...) */
    private String handleCreateTable(String tableName, String colsRaw) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected. Use USE <dbName> first.";
        }
        String tableNameLower = tableName.toLowerCase();
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not found in memory?!";
        }
        if(db.tables.containsKey(tableNameLower)) {
            return "[ERROR] Table already exists: " + tableName;
        }
        // 解析列名列表（用户可能传空字符串）
        List<String> columns = new ArrayList<>();
        if(!colsRaw.isEmpty()) {
            // 以逗号拆分
            String[] colArr = colsRaw.split(",");
            for(String c : colArr) {
                String colName = c.trim();
                if(colName.isEmpty()) {
                    return "[ERROR] Invalid empty column name";
                }
                // 关键字判断（此处简单示例，仅演示）
                if(isReservedKeyword(colName)) {
                    return "[ERROR] Cannot use reserved keyword as column name: " + colName;
                }
                columns.add(colName);
            }
        }
        // 创建表对象
        Table newTable = new Table(tableName, columns);
        db.tables.put(tableNameLower, newTable);
        // 写回文件系统
        db.saveTableToFile(newTable, storageFolderPath);
        return "[OK]";
    }

    /** DROP DATABASE dbName */
    private String handleDropDatabase(String dbName) {
        String dbNameLower = dbName.toLowerCase();
        if(!databases.containsKey(dbNameLower)) {
            return "[ERROR] Database not found: " + dbName;
        }
        // 从内存删除
        databases.remove(dbNameLower);
        // 从文件系统删除
        File dbFolder = new File(storageFolderPath, dbNameLower);
        if(dbFolder.exists()) {
            deleteDirectory(dbFolder);
        }
        // 如果正在使用这个DB，需要清空当前选择
        if(currentDatabaseName != null && currentDatabaseName.equals(dbNameLower)) {
            currentDatabaseName = null;
        }
        return "[OK]";
    }

    /** DROP TABLE tableName */
    private String handleDropTable(String tableName) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        String tableNameLower = tableName.toLowerCase();
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not found in memory?!";
        }
        if(!db.tables.containsKey(tableNameLower)) {
            return "[ERROR] Table does not exist: " + tableName;
        }
        db.tables.remove(tableNameLower);
        File tableFile = new File(new File(storageFolderPath, currentDatabaseName), tableNameLower + ".tab");
        if(tableFile.exists()) {
            boolean deleted = tableFile.delete();
            if(!deleted){
                return "[ERROR] Failed to delete table: " + tableName;
            }
        }
        return "[OK]";
    }

    /** ALTER TABLE tableName ADD/DROP colName */
    private String handleAlterTable(String tableName, String action, String colName) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not found in memory?!";
        }
        Table table = db.getTable(tableName);
        if(table == null) {
            return "[ERROR] Table does not exist: " + tableName;
        }

        String colNameLower = colName.toLowerCase();
        if(action.equals("ADD")) {
            // 检查是否已经有此列
            if(table.hasColumn(colNameLower)) {
                return "[ERROR] Column already exists: " + colName;
            }
            if(isReservedKeyword(colName)) {
                return "[ERROR] Column name cannot be a reserved keyword: " + colName;
            }
            // 添加列
            table.addColumn(colName);
        } else if(action.equals("DROP")) {
            // 不允许删除id
            if(colNameLower.equals("id")) {
                return "[ERROR] Cannot drop 'id' column.";
            }
            if(!table.hasColumn(colNameLower)) {
                return "[ERROR] Column not found: " + colName;
            }
            table.dropColumn(colName);
        } else {
            return "[ERROR] Invalid ALTER action: " + action;
        }
        db.saveTableToFile(table, storageFolderPath);
        return "[OK]";
    }

    /** INSERT INTO tableName VALUES(...) */
    private String handleInsert(String tableName, String valuesRaw) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not in memory?!";
        }
        Table table = db.getTable(tableName);
        if(table == null) {
            return "[ERROR] Table not found: " + tableName;
        }
        // 解析values (逗号分隔，外面可能带引号)
        List<String> insertedValues = parseValueList(valuesRaw);
        // 期望列数 = table.columns.size - 1(因为id是自动的?)
        // 但是此处我们的设计：table.columns实际上包含 "id" + 其他列
        // 所以用户只需提供 table.columns.size - 1 个值
        int expectedValuesCount = table.getColumns().size() - 1;
        if(insertedValues.size() != expectedValuesCount) {
            return "[ERROR] Inserted values count mismatch. Expect " + expectedValuesCount;
        }

        // 构建一行
        Row newRow = new Row(table.generateNextId());
        // 给每个列赋值(排除第0列 id)
        for(int i=1; i<table.getColumns().size(); i++){
            String colName = table.getColumns().get(i); // 原始大小写
            String val = insertedValues.get(i-1);
            // 简化存储(直接原字符串即可)
            newRow.values.put(colName.toLowerCase(), val);
        }
        table.rows.add(newRow);

        // 写回文件
        db.saveTableToFile(table, storageFolderPath);
        return "[OK]";
    }

    /** SELECT <colPart> FROM table [WHERE <condition>] */
    private String handleSelect(String tableName, String colPart, String wherePart) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not in memory?!";
        }
        Table table = db.getTable(tableName);
        if(table == null) {
            return "[ERROR] Table not found: " + tableName;
        }
        // 解析要选取的列
        List<String> selectedCols;
        if(colPart.trim().equals("*")) {
            // 选取全部列
            selectedCols = new ArrayList<>(table.getColumns());
        } else {
            selectedCols = parseAttributeList(colPart);
            // 检查列是否都存在
            for(String col : selectedCols) {
                if(!table.hasColumn(col.toLowerCase())) {
                    return "[ERROR] Column not found: " + col;
                }
            }
        }
        // 找到where条件匹配的行
        List<Row> matchedRows = table.filterRows(wherePart);

        if(matchedRows.isEmpty()) {
            return "[ERROR] Attribute does not exist" ;
        }

        // 构造结果字符串
        StringBuilder sb = new StringBuilder("[OK]\n");
        // 打印列名
        for(String col : selectedCols) {
            sb.append(col).append("\t");
        }
        sb.append("\n");

        // 打印行
        for(Row r : matchedRows) {
            for(String col : selectedCols) {
                String colLower = col.toLowerCase();
                if(colLower.equals("id")) {
                    sb.append(r.id).append("\t");
                } else {
                    // 可能为空则显示null
                    String val = r.values.getOrDefault(colLower, "");
                    sb.append(val).append("\t");
                }
            }
            sb.append("\n");
        }
        return sb.toString().trim();
    }

    /** UPDATE tableName SET col1=val1,... WHERE condition */
    private String handleUpdate(String tableName, String setPart, String wherePart) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not in memory?!";
        }
        Table table = db.getTable(tableName);
        if(table == null) {
            return "[ERROR] Table not found: " + tableName;
        }
        // 解析SET的col=val列表
        Map<String, String> setMap = parseNameValueList(setPart);
        // 检查是否更新 id
        for(String colNameLower : setMap.keySet()) {
            if(colNameLower.equals("id")) {
                return "[ERROR] Cannot update 'id' column";
            }
            if(!table.hasColumn(colNameLower)) {
                return "[ERROR] Column not found: " + colNameLower;
            }
        }
        // 找到where条件匹配的行
        List<Row> matchedRows = table.filterRows(wherePart);

        // 更新这些行
        for(Row row : matchedRows) {
            for(Map.Entry<String,String> e : setMap.entrySet()) {
                row.values.put(e.getKey(), e.getValue());
            }
        }
        // 写回文件
        db.saveTableToFile(table, storageFolderPath);
        return "[OK]";
    }

    /** DELETE FROM tableName WHERE condition */
    private String handleDelete(String tableName, String wherePart) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not in memory?!";
        }
        Table table = db.getTable(tableName);
        if(table == null) {
            return "[ERROR] Table not found: " + tableName;
        }
        // 找到要删除的行
        List<Row> matchedRows = table.filterRows(wherePart);
        // 执行删除
        table.rows.removeAll(matchedRows);
        // 写回文件
        db.saveTableToFile(table, storageFolderPath);
        return "[OK]";
    }

    /** JOIN table1 AND table2 ON col1 AND col2 */
    private String handleJoin(String table1, String table2, String col1, String col2) {
        if(currentDatabaseName == null) {
            return "[ERROR] No database selected.";
        }
        Database db = databases.get(currentDatabaseName);
        if(db == null) {
            return "[ERROR] Current database not in memory?!";
        }
        Table t1 = db.getTable(table1);
        Table t2 = db.getTable(table2);
        if(t1 == null || t2 == null) {
            return "[ERROR] One or both tables do not exist";
        }
        // 检查列是否存在
        if(!t1.hasColumn(col1.toLowerCase()) || !t2.hasColumn(col2.toLowerCase())) {
            return "[ERROR] Join column not found in table(s)";
        }
        // 拼接
        List<Row> resultRows = new ArrayList<>();
        // 内连接：当 t1.row.col1 == t2.row.col2 时合并
        for(Row r1 : t1.rows) {
            String v1 = r1.getValue(col1.toLowerCase());
            for(Row r2 : t2.rows) {
                String v2 = r2.getValue(col2.toLowerCase());
                if(v1 != null && v1.equals(v2)) {
                    // 两条匹配 => 生成新行
                    Row joined = new Row(generateTempId()); // 生成个临时ID
                    // 把 t1 的除 id 外的列都加进来
                    for(int i=1; i<t1.getColumns().size(); i++){
                        String cName = t1.getColumns().get(i);
                        String val = r1.getValue(cName.toLowerCase());
                        // 加名的时候 => tableName.colName
                        joined.values.put(t1.name.toLowerCase()+"."+cName.toLowerCase(), val); // Corrected here
                    }
                    // 把 t2 的除 id 外的列都加进来
                    for(int i=1; i<t2.getColumns().size(); i++){
                        String cName = t2.getColumns().get(i);
                        String val = r2.getValue(cName.toLowerCase());
                        joined.values.put(t2.name.toLowerCase()+"."+cName.toLowerCase(), val); // Corrected here
                    }
                    resultRows.add(joined);
                }
            }
        }

        // 构造输出
        // 先构造列名列表 => "id", "table1.col1", "table1.col2", ..., "table2.col1", ...
        List<String> joinedCols = new ArrayList<>();
        joinedCols.add("id");
        for(int i=1; i<t1.getColumns().size(); i++){
            String cc = t1.name+"."+t1.getColumns().get(i); // Corrected here
            joinedCols.add(cc);
        }
        for(int i=1; i<t2.getColumns().size(); i++){
            String cc = t2.name+"."+t2.getColumns().get(i); // Corrected here
            joinedCols.add(cc);
        }

        StringBuilder sb = new StringBuilder("[OK]\n");
        // 列标题
        for(String c : joinedCols) {
            sb.append(c).append("\t");
        }
        sb.append("\n");
        // 数据行
        for(Row r : resultRows) {
            // id
            sb.append(r.id).append("\t");
            // 其余
            for(int i=1; i<joinedCols.size(); i++){
                String colNameFull = joinedCols.get(i);
                String colLower = colNameFull.toLowerCase();
                // 在 r.values 里，key 是 "tableName.colName" (都小写)
                String val = r.values.getOrDefault(colLower, "");
                sb.append(val).append("\t");
            }
            sb.append("\n");
        }
        return sb.toString().trim();
    }


    // =============== 工具函数 ===============

    private boolean isReservedKeyword(String word) {
        // 简单举例，实际上你可以把 BNF 里用到的关键字都列进来
        String[] keywords = {
                "SELECT","FROM","WHERE","AND","OR","UPDATE","SET","DELETE",
                "INSERT","INTO","VALUES","CREATE","TABLE","DATABASE","DROP",
                "ALTER","JOIN","USE","TRUE","FALSE","LIKE","NULL"
        };
        for(String k : keywords){
            if(k.equalsIgnoreCase(word)){
                return true;
            }
        }
        return false;
    }

    /** 递归删除文件/文件夹 */
    private void deleteDirectory(File file) {
        if(file.isDirectory()){
            File[] children = file.listFiles();
            if(children != null){
                for(File c : children){
                    deleteDirectory(c);
                }
            }
        }
        file.delete();

    }

    // 解析形如: col1, col2, col3
    private List<String> parseAttributeList(String raw) {
        List<String> result = new ArrayList<>();
        String[] arr = raw.split(",");
        for(String s : arr) {
            result.add(s.trim());
        }
        return result;
    }

    // 解析形如: col1=val1, col2=val2
    private Map<String,String> parseNameValueList(String raw) {
        Map<String,String> map = new LinkedHashMap<>();
        // 以逗号分割
        String[] pairs = raw.split(",");
        for(String p : pairs) {
            p = p.trim();
            // 再以 = 分割
            String[] kv = p.split("=");
            if(kv.length != 2) {
                // 不严谨的地方, 这里直接报错
                throw new RuntimeException("Invalid SET syntax near: " + p);
            }
            String key = kv[0].trim();
            if(key.isEmpty()){
                throw new RuntimeException("Empty column in set-part");
            }
            String value = kv[1].trim();
            map.put(key.toLowerCase(), stripOuterQuotes(value));
        }
        return map;
    }

    // 解析形如: val1, val2, val3
    private List<String> parseValueList(String raw) {
        // 简单版本：按逗号分隔，然后去掉首尾引号
        List<String> result = new ArrayList<>();
        String[] arr = raw.split(",");
        for(String s : arr) {
            s = s.trim();
            String val = stripOuterQuotes(s);
            result.add(val);
        }
        return result;
    }

    // 如果是 'xxx' 形式，就去掉外层引号
    private String stripOuterQuotes(String s) {
        if(s.startsWith("'") && s.endsWith("'") && s.length() >= 2) {
            return s.substring(1, s.length()-1);
        }
        return s;
    }

    private static int tempIdCounter = 100000000;
    private synchronized int generateTempId() {
        // JOIN时新建的表临时ID
        return tempIdCounter++;
    }

    // =============== 文件与内存加载/保存 ===============

    /**
     * 从 databases/ 目录下加载所有数据库
     * 每个数据库是一个子文件夹; 每个表是 .tab 文件
     */
    private void loadAllDatabasesFromFolder() {
        File dbRoot = new File(storageFolderPath);
        File[] dbFolders = dbRoot.listFiles();
        if(dbFolders == null) return;
        for(File folder : dbFolders) {
            if(folder.isDirectory()) {
                String dbNameLower = folder.getName().toLowerCase();
                Database dbObj = new Database(dbNameLower);
                // 读取该文件夹下所有 .tab 文件
                File[] tableFiles = folder.listFiles();
                if(tableFiles != null) {
                    for(File tf : tableFiles) {
                        if(tf.isFile() && tf.getName().endsWith(".tab")) {
                            dbObj.loadTableFromFile(tf);
                        }
                    }
                }
                databases.put(dbNameLower, dbObj);
            }
        }
    }

    //  === Methods below handle networking aspects - DO NOT change them ! ===

    public static void main(String[] args) throws IOException {
        DBServer server = new DBServer();
        server.blockingListenOn(8888);
    }

    public void blockingListenOn(int portNumber) throws IOException {
        try (ServerSocket s = new ServerSocket(portNumber)) {
            System.out.println("Server listening on port " + portNumber);
            while (!Thread.interrupted()) {
                try {
                    blockingHandleConnection(s);
                } catch (IOException e) {
                    System.err.println("Server encountered a non-fatal IO error:");
                    e.printStackTrace();
                    System.err.println("Continuing...");
                }
            }
        }
    }

    private void blockingHandleConnection(ServerSocket serverSocket) throws IOException {
        try (Socket s = serverSocket.accept();
             BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));
             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()))) {

            System.out.println("Connection established: " + serverSocket.getInetAddress());
            while (!Thread.interrupted()) {
                String incomingCommand = reader.readLine();
                if(incomingCommand == null) {
                    break;
                }
                System.out.println("Received message: " + incomingCommand);
                String result = handleCommand(incomingCommand);
                writer.write(result);
                writer.write("\n" + END_OF_TRANSMISSION + "\n");
                writer.flush();
            }
        }
    }

    // =============== 内部类: Database/Table/Row ===============

    /**
     * 数据库对象
     */
    private static class Database {
        String name;  // 小写名字
        // { tableNameLower -> Table对象 }
        Map<String, Table> tables = new HashMap<>();

        Database(String name) {
            this.name = name;
        }

        Table getTable(String tableName) {
            return tables.get(tableName.toLowerCase());
        }

        /**
         * 把某个Table写回文件系统
         */
        void saveTableToFile(Table table, String dbRootPath) {
            File dbFolder = new File(dbRootPath, name);
            if(!dbFolder.exists()) {
                dbFolder.mkdir();
            }
            File tableFile = new File(dbFolder, table.name.toLowerCase() + ".tab");
            // 写文件: 第一行放列名(用\t分隔), 后续每行一个Row
            try(PrintWriter pw = new PrintWriter(new FileWriter(tableFile, false))) {
                // 列名行
                List<String> cols = table.getColumns();  // 其中第0个是 "id"
                pw.println(String.join("\t", cols));
                // 行
                for(Row r : table.rows) {
                    // 先写id
                    StringBuilder sb = new StringBuilder();
                    sb.append(r.id);
                    // 再写其他列
                    for(int i=1; i<cols.size(); i++){
                        String colName = cols.get(i);
                        String val = r.values.getOrDefault(colName.toLowerCase(), "");
                        sb.append("\t").append(val);
                    }
                    pw.println(sb.toString());
                }
            } catch(IOException e) {
                // 仅示例
                System.err.println("Failed to save table to file: " + tableFile.getAbsolutePath());
            }
        }

        /**
         * 从文件加载一个表
         */
        void loadTableFromFile(File tableFile) {
            String rawName = tableFile.getName(); // e.g. marks.tab
            // 去掉 .tab
            String tName = rawName.substring(0, rawName.length()-4);
            Table table = null;
            try(BufferedReader br = new BufferedReader(new FileReader(tableFile))) {
                String header = br.readLine();
                if(header == null) {
                    // 没有内容
                    table = new Table(tName, new ArrayList<>());
                } else {
                    String[] colArr = header.split("\t");
                    List<String> columns = new ArrayList<>(Arrays.asList(colArr));
                    table = new Table(tName, columns, false); // false表示不自动附加id列
                    String line;
                    while((line = br.readLine()) != null) {
                        String[] parts = line.split("\t", -1);
                        if(parts.length != columns.size()) {
                            // 格式不对
                            throw new IOException("Row column count mismatch");
                        }
                        // 第0列是id
                        int rid = Integer.parseInt(parts[0]);
                        Row row = new Row(rid);
                        for(int i=1; i<columns.size(); i++){
                            String cName = columns.get(i);
                            row.values.put(cName.toLowerCase(), parts[i]);
                        }
                        table.rows.add(row);
                        // 更新nextId
                        if(rid >= table.nextId) {
                            table.nextId = rid+1;
                        }
                    }
                }
                tables.put(tName.toLowerCase(), table);
            } catch(IOException e) {
                System.err.println("Failed to load table from file: " + tableFile.getAbsolutePath());
            }
        }
    }

    /**
     * 表对象
     */
    private static class Table {
        private final String name;          // 原始大小写
        private final List<String> columns; // 例如 [id, name, mark, pass]
        private final List<Row> rows;       // 行
        private int nextId = 1;            // 用于分配下一个可用id


        // 新建时(带列名)
        Table(String name, List<String> userDefinedColumns) {
            this.name = name;
            this.rows = new ArrayList<>();
            this.columns = new ArrayList<>();
            // 第0列永远是"id"
            this.columns.add("id");
            // 其余
            for(String c : userDefinedColumns) {
                this.columns.add(c);
            }
        }
        // 从文件加载时
        Table(String name, List<String> loadedColumns, boolean newTable) {
            this.name = name;
            this.rows = new ArrayList<>();
            this.columns = new ArrayList<>(loadedColumns);
            // 如果 newTable == true，可以自动加id之类，但这里是文件加载用，不需再加
        }

        List<String> getColumns(){
            return columns;
        }

        boolean hasColumn(String colNameLower){
            for(String c : columns) {
                if(c.equalsIgnoreCase(colNameLower)) {
                    return true;
                }
            }
            return false;
        }

        // 获取下一个ID并自增
        int generateNextId(){
            int idVal = nextId;
            nextId++;
            return idVal;
        }

        // 添加列(列末尾)
        void addColumn(String colName) {
            columns.add(colName);
            // 现有行中相当于添加该列的空值
            for(Row r : rows) {
                r.values.put(colName.toLowerCase(), "");
            }
        }

        // 删除列
        void dropColumn(String colName) {
            // 先从 columns 中移除
            for(int i=0; i<columns.size(); i++){
                if(columns.get(i).equalsIgnoreCase(colName)) {
                    columns.remove(i);
                    break;
                }
            }
            // 再从每行的 map 中移除
            for(Row r : rows){
                r.values.remove(colName.toLowerCase());
            }
        }

        // 根据where条件筛选行(示例中做了非常简单的解析)
        List<Row> filterRows(String wherePart){
            // 若无wherePart，则返回所有
            if(wherePart == null || wherePart.trim().isEmpty()){
                return new ArrayList<>(rows);
            }
            // 这里只支持最简单格式: col == 'val' / col != 'val' / col > num ...
            // 当然你可以做更完整的解析(AND/OR等)
            // 由于测试脚本主要用到简单条件，这里做最简易实现
            List<Row> matched = new ArrayList<>();
            // 正则捕捉: <col> <op> <value>
            // 例如: age == '20', name != 'Chris' 等
            // 这只是示例，不覆盖所有情况
            Pattern p = Pattern.compile("(?i)^([A-Za-z0-9]+)\\s*(==|!=|>|<|>=|<=|LIKE)\\s*('.*'|TRUE|FALSE|[+\\-]?[0-9]+(\\.[0-9]+)?|NULL)$");
            Matcher m = p.matcher(wherePart.trim());
            if(!m.find()) {
                // 解析失败就当没匹配
                return matched; // 返回空
            }
            String col = m.group(1);
            String op = m.group(2).toUpperCase();
            String rightVal = m.group(3);
            rightVal = rightVal.trim();
            // 如果是字符串literal则去掉引号
            if(rightVal.startsWith("'") && rightVal.endsWith("'") && rightVal.length()>1){
                rightVal = rightVal.substring(1, rightVal.length()-1);
            }

            // 遍历表中所有行
            for(Row r : rows) {
                String leftVal = r.getValue(col.toLowerCase());
                if(leftVal == null) {
                    leftVal = "";
                }
                if(evaluateCondition(leftVal, op, rightVal)) {
                    matched.add(r);
                }
            }
            return matched;
        }

        // 简易比较函数
        private boolean evaluateCondition(String leftVal, String op, String rightVal) {
            switch(op) {
                case "==":
                    return leftVal.equals(rightVal);
                case "!=":
                    return !leftVal.equals(rightVal);
                case ">":
                    return toFloat(leftVal) > toFloat(rightVal);
                case "<":
                    return toFloat(leftVal) < toFloat(rightVal);
                case ">=":
                    return toFloat(leftVal) >= toFloat(rightVal);
                case "<=":
                    return toFloat(leftVal) <= toFloat(rightVal);
                case "LIKE":
                    // 子串匹配 (区分大小写), 可自行选择
                    return leftVal.contains(rightVal);
                default:
                    return false;
            }
        }

        private float toFloat(String s) {
            try {
                return Float.parseFloat(s);
            } catch(Exception e) {
                // 不是数字则返回一个默认0
                return 0f;
            }
        }

    }

    /**
     * 行对象
     */
    private static class Row {
        int id;
        // key=列名(小写)，value=存的字符串
        Map<String,String> values = new HashMap<>();

        Row(int id) {
            this.id = id;
        }

        String getValue(String colNameLower){
            if(colNameLower.equals("id")) {
                return String.valueOf(id);
            }
            return values.get(colNameLower);
        }
    }
}
